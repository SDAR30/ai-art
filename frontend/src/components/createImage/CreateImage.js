import { useState } from 'react';
import { apiURL } from "../../utils/apiURL"
import { useCookies } from 'react-cookie';
import './CreateImage.scss'

function CreateImage() {
    const URL = apiURL();
    const [cookies] = useCookies('token');
    const date = new Date();
    const currentDate = date.getUTCFullYear() + '-' + (date.getUTCMonth() + 1) + '-' + date.getUTCDate()
    const [image, setImage] = useState({
        title: "", ai: "DALL-E", instructions: "", prompt: "",
        date: currentDate, url: '', user_id: cookies.token ? cookies.user.id : 0
    })
    const [imageFile, setImageFile] = useState('')

    const handleSubmit = (e) => {
        e.preventDefault();
        console.log('submitting image to backend')

        //post image to backend
        const requestOptions = {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(image)
        }
        fetch(`${URL}/images`, requestOptions).then(res => res.json()).then(data => {
            //image posted to backend
            //show success toast message
            console.log('data: ', data)
        }).catch(err => {
            //image failed to post to backend
            //show error toast message
            console.log(err)

        })
    }

    const handleChange = (e) => {
        setImage({ ...image, [e.target.id]: e.target.value });
    };

    const generateImage = (e) => {
        let prompt = image.prompt;
        if (!prompt) { return }
        console.log('generating image of prompt: ' + prompt)

        const reqOptions = {
            method: 'POST',
            body: JSON.stringify({ prompt }),
            headers: { 'Content-Type': 'application/json', }
        }
        fetch(`${URL}/stability`, reqOptions)
            .then((response) => {
                return response.blob();
            })
            .then((blob) => {
                console.log('blob: ', blob)
                debugger

                //get secure url from backend
                fetch(`${URL}/s3url`, {}
                ).then(res => res.json()).then(data => {
                    console.log('url taken from s3 ')

                    //post image directly to s3 bucket by saving blob to s3
                    fetch(data.url, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "multipart/form-data"
                        },
                        body: blob
                    }).then(res => {
                        //post image to appear on frontend
                        let url = data.url.split('?')[0];
                        setImageFile(url)
                        setImage({ ...image, url: url })
                        console.log('res: ', res)
                    })
                })

                console.log('past s3 block')
                //FileSaver.saveAs(blob, 'file.jpg');
                // const b64 = Buffer.from(data.data[0]['b64_json']); // your Buffer object
                // const buffer = Buffer.from(b64, 'base64')
                //const base64 = buffer.toString('base64');
                // setImageFile(`data:image/png;base64,${buffer}`);
                //setImageFile(data.url)
                //setImage(data.data[0].url)

            }).catch(err => {
                console.log('catching error in generateImage in CreateImage')
                console.log(err)
            })
    }

    return (
        <div className='createImageForm'>
            <textarea id='prompt' placeholder='Enter a detailed prompt for DALL-E to generate' value={image.prompt} onChange={handleChange} maxLength="50" required />
            <select id='ai' onChange={handleChange} required defaultValue={0}>
                <option value=""> Select AI</option>
                <option value="DALL-E">DALL-E</option>
                <option value="Stable Diffusion">Stable Diffusion</option>
            </select>
            <button onClick={e => generateImage(e)}>{imageFile ? 'Generate again' : 'Generate'}</button>
            {imageFile && <img src={imageFile} id='dalle_image' alt="generated by DALLE" />}
            {imageFile &&
                <form onSubmit={handleSubmit} >
                    <input id='title' placeholder='enter a title for this image' value={image.title} onChange={handleChange} maxLength="30" required />
                    <button className='createImageForm__submit' >Submit to Gallery</button>
                </form>}
        </div>
    );
}

export default CreateImage;